class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

class BinaryTree:
    def __init__(self):
        self.root = None
    
    def add(self, key):
        self.root = self._add(self.root, key)
    
    def _add(self, node, key):
        if node is None:
            return Node(key)
        
        if key < node.key:
            node.left = self._add(node.left, key)
        elif key > node.key:
            node.right = self._add(node.right, key)
        
        return node
    
    def search(self, key):
        return self._search(self.root, key)
    
    def _search(self, node, key):
        if node is None or node.key == key:
            return node
        if key < node.key:
            return self._search(node.left, key)
        return self._search(node.right, key)
    
    def remove(self, key):
        self.root = self._remove(self.root, key)
    
    def _remove(self, node, key):
        if node is None:
            return node
        
        if key < node.key:
            node.left = self._remove(node.left, key)
        elif key > node.key:
            node.right = self._remove(node.right, key)
        else:
            if node.left is None:
                return node.right
            elif node.right is None:
                return node.left
            
            temp = self._min_value_node(node.right)
            node.key = temp.key
            node.right = self._remove(node.right, temp.key)
        
        return node
    
    def _min_value_node(self, node):
        current = node
        while current.left is not None:
            current = current.left
        return current
    
    def inorder_traversal(self):
        result = []
        self._inorder_traversal(self.root, result)
        return result
    
    def _inorder_traversal(self, node, result):
        if node is not None:
            self._inorder_traversal(node.left, result)
            result.append(node.key)
            self._inorder_traversal(node.right, result)


class RedBlackTree(BinaryTree):
    RED = True
    BLACK = False

    class RbNode(Node):
        def __init__(self, key):
            super().__init__(key)
            self.color = RedBlackTree.RED

    def __init__(self):
        super().__init__()

    def add(self, key):
        self.root = self._add(self.root, key)
        self.root.color = RedBlackTree.BLACK

    def _add(self, node, key):
        if node is None:
            return RedBlackTree.RbNode(key)

        if key < node.key:
            node.left = self._add(node.left, key)
        elif key > node.key:
            node.right = self._add(node.right, key)

        if self._is_red(node.right) and not self._is_red(node.left):
            node = self._rotate_left(node)
        if self._is_red(node.left) and self._is_red(node.left.left):
            node = self._rotate_right(node)
        if self._is_red(node.left) and self._is_red(node.right):
            self._flip_colors(node)

        return node

    def _rotate_left(self, node):
        x = node.right
        node.right = x.left
        x.left = node
        x.color = node.color
        node.color = RedBlackTree.RED
        return x

    def _rotate_right(self, node):
        x = node.left
        node.left = x.right
        x.right = node
        x.color = node.color
        node.color = RedBlackTree.RED
        return x

    def _flip_colors(self, node):
        node.color = not node.color
        node.left.color = not node.left.color
        node.right.color = not node.right.color

    def _is_red(self, node):
        if node is None:
            return False
        return node.color == RedBlackTree.RED


class AVLTree(BinaryTree):
    def __init__(self):
        super().__init__()

    def _height(self, node):
        if node is None:
            return -1
        return max(self._height(node.left), self._height(node.right)) + 1

    def _balance_factor(self, node):
        if node is None:
            return 0
        return self._height(node.left) - self._height(node.right)

    def add(self, key):
        self.root = self._add(self.root, key)

    def _add(self, node, key):
        if node is None:
            return Node(key)

        if key < node.key:
            node.left = self._add(node.left, key)
        elif key > node.key:
            node.right = self._add(node.right, key)

        balance = self._balance_factor(node)

        if balance > 1 and key < node.left.key:
            return self._rotate_right(node)
        if balance < -1 and key > node.right.key:
            return self._rotate_left(node)
        if balance > 1 and key > node.left.key:
            node.left = self._rotate_left(node.left)
            return self._rotate_right(node)
        if balance < -1 and key < node.right.key:
            node.right = self._rotate_right(node.right)
            return self._rotate_left(node)

        return node

    def _rotate_left(self, z):
        y = z.right
        T2 = y.left

        y.left = z
        z.right = T2

        return y

    def _rotate_right(self, y):
        x = y.left
        T2 = x.right

        x.right = y
        y.left = T2

        return x

def test_basic_bst():
    bst = BinaryTree()
    keys = [7, 3, 10, 5, 1, 9, 12]
    for key in keys:
        bst.add(key)

    assert bst.inorder_traversal() == [1, 3, 5, 7, 9, 10, 12]

    assert bst.search(5).key == 5
    assert bst.search(8) is None

    bst.remove(5)
    assert bst.inorder_traversal() == [1, 3, 7, 9, 10, 12]

def test_red_black_tree():
    rb_tree = RedBlackTree()
    keys = [7, 3, 10, 5, 1, 9, 12]
    for key in keys:
        rb_tree.add(key)

    assert rb_tree.inorder_traversal() == [1, 3, 5, 7, 9, 10, 12]

    assert rb_tree.search(5).key == 5
    assert rb_tree.search(8) is None

    rb_tree.remove(5)
    assert rb_tree.inorder_traversal() == [1, 3, 7, 9, 10, 12]

test_basic_bst()
test_red_black_tree()
